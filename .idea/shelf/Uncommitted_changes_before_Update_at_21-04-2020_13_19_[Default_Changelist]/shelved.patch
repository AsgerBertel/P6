Index: src/main/java/OLAP/NodeQueryUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package OLAP;\r\n\r\nimport Lattice.Dimension;\r\nimport Lattice.Level;\r\nimport Lattice.Node;\r\n\r\n\r\n\r\npublic class NodeQueryUtils {\r\n\r\n    public static void main(String[] args) {\r\n        Dimension d1 = new Dimension(new Level[]{\r\n                new Level(\"Coordinate\",0),\r\n                new Level(\"District\",0),\r\n                new Level(\"None\",0)\r\n        });\r\n        Dimension d2 = new Dimension(new Level[]{\r\n                new Level(\"TopTopic\",0),\r\n                new Level(\"SubTopic\", 0)\r\n        });\r\n        Dimension d3 = new Dimension(new Level[]{\r\n                new Level(\"Day\",0),\r\n                new Level(\"Month\",0)\r\n        });\r\n\r\n        Node root = new Node(new Object[][]{\r\n                {d1, new Level(\"Coordinate\",0)},\r\n                {d2, new Level(\"TopTopic\",0)},\r\n                {d3, new Level(\"Day\",0)}\r\n        });\r\n        Node intermediate = new Node(new Object[][]{\r\n                {d1, new Level(\"District\",0)},\r\n                {d2, new Level(\"TopTopic\",0)},\r\n                {d3, new Level(\"Day\",0)}\r\n        });\r\n        Node child = new Node(new Object[][]{\r\n                {d1, new Level(\"None\",0)},\r\n                {d2, new Level(\"TopTopic\",0)},\r\n                {d3, new Level(\"Day\",0)}\r\n        });\r\n        child.setMaterializedUpperNode(root);\r\n        child.setImmediateParentNode(intermediate);\r\n        intermediate.setImmediateParentNode(root);\r\n        intermediate.setMaterializedUpperNode(root);\r\n        Dimension d = getDescendantDimension(child);\r\n        System.out.println(frequencyView(child));\r\n\r\n    }\r\n\r\n    public static String nodeToQuery(Node node, Measure measure){\r\n        switch (measure) {\r\n            case FREQUENCY:\r\n                return frequencyView(node);\r\n            default: return \"Y I K E S\";\r\n        }\r\n    }\r\n\r\n    private static String createViewQuery(Node node){\r\n        return \"CREATE VIEW \" +\r\n                getNodeViewName(node) +\r\n                \" AS \";\r\n    }\r\n    private static boolean containsNoneDimension(Node node){\r\n        for(Level l : node.getDimensions().values()){\r\n            if(l.getName().equals(\"None\")){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    private static String frequencyView(Node node){\r\n        if(containsNoneDimension(node)){\r\n            return frequencyNoneView(node);\r\n        }\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(createViewQuery(node));\r\n        sb.append(\"\\n\");\r\n        sb.append(selectQuery());\r\n        sb.append(\", \");\r\n        sb.append(\"count(\");\r\n        //todo add count append here\r\n        sb.append(\")\").append(\"\\n\");\r\n        sb.append(fromQuery(node));\r\n        return sb.toString();\r\n    }\r\n\r\n    private static String frequencyNoneView(Node node) {\r\n        //Select all dimension except for the one with None\r\n\r\n        return \"\";\r\n    }\r\n\r\n    private static Dimension getDescendantDimension(Node child){\r\n        //This function compares the child node to its immediate parent and returns the dimension\r\n        //where the child has a descendant dimension from the parent\r\n        //It returns an array\r\n        for(Dimension parentDimension : child.getImmediateParentNode().getDimensions().keySet()){\r\n            for(Dimension childDimension : child.getDimensions().keySet()){\r\n                if(parentDimension.getDescendant(child.getImmediateParentNode().getDimensions().get(parentDimension))\r\n                        .equals(child.getDimensions().get(childDimension))){\r\n                    return parentDimension;\r\n                }\r\n            }\r\n        }\r\n        throw new RuntimeException(\"No descendant dimension found\");\r\n    }\r\n\r\n    private static String selectQuery(){\r\n        return \"SELECT *\";\r\n    }\r\n    /**\r\n     * In this method we get a construct a from query, where we inner join on our immediate parent view.\r\n     * This way we should never have to \"nest\" inner joins\r\n     * */\r\n    private static String fromQuery(Node node){\r\n        StringBuilder sb = new StringBuilder();\r\n        Dimension diff_dimension = getDescendantDimension(node);\r\n        sb.append(\"FROM \");\r\n        sb.append(getNodeViewName(node.getImmediateParentNode()));\r\n        sb.append(\" INNER JOIN \");\r\n        sb.append(node.getDimensions().get(diff_dimension).getName());\r\n        sb.append(\" ON \");\r\n        sb.append(node.getDimensions().get(diff_dimension).getName()).append(\".id\");\r\n        sb.append(\" = \").append(getNodeViewName(node.getImmediateParentNode())).append(\".\").append(node.getDimensions().get(diff_dimension).getName()).append(\"id\");\r\n        return sb.toString();\r\n    }\r\n    private static String getNodeViewName(Node node){\r\n        StringBuilder sb = new StringBuilder();\r\n        for(Dimension d: node.getDimensions().keySet()){\r\n            sb.append(node.getDimensions().get(d).getName());\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    private static String whereQuery(Node node){\r\n        return \"\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/OLAP/NodeQueryUtils.java	(revision 1bed461a8493a635bbfd54e13d22442632cac03b)
+++ src/main/java/OLAP/NodeQueryUtils.java	(date 1587380300288)
@@ -22,7 +22,6 @@
                 new Level("Day",0),
                 new Level("Month",0)
         });
-
         Node root = new Node(new Object[][]{
                 {d1, new Level("Coordinate",0)},
                 {d2, new Level("TopTopic",0)},
@@ -58,7 +57,7 @@
     private static String createViewQuery(Node node){
         return "CREATE VIEW " +
                 getNodeViewName(node) +
-                " AS ";
+                " AS "; 
     }
     private static boolean containsNoneDimension(Node node){
         for(Level l : node.getDimensions().values()){
Index: src/main/java/Sql/FileGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Sql;\r\n\r\nimport uk.ac.wlv.sentistrength.SentiStrength;\r\n\r\nimport java.io.*;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.text.DecimalFormat;\r\nimport java.util.Scanner;\r\n\r\npublic class FileGenerator {\r\n\r\n    private ResultSet resultSet;\r\n\r\n    public void createFileWithLocationId() throws SQLException, IOException {\r\n\r\n        resultSet = ConnectionManager.selectSQL(QueryManager.selectCoordinatesidFromCoordinates);\r\n        System.out.println(\"starting loading list\");\r\n        File sentimenttext = new File(\"C:/Users/madsf/Desktop/tweet-editing/locationid.txt\");\r\n        FileWriter fr = new FileWriter(sentimenttext, true);\r\n        BufferedWriter writer = new BufferedWriter(fr);\r\n        while (resultSet.next()) {\r\n            System.out.println(resultSet.getInt(1));\r\n            writer.write(resultSet.getInt(1) + \"\\n\");\r\n\r\n        }\r\n        writer.close();\r\n    }\r\n\r\n    public void mergeFiles() throws FileNotFoundException, IOException {\r\n        PrintWriter pw = new PrintWriter(new File(\"C:/Users/madsf/Desktop/tweet-editing/tweetsWithTopicAndSentimentAndCoordinatesMetaFile.txt\"));\r\n        // BufferedReader object for file1.txt\r\n        BufferedReader br1 = new BufferedReader(new FileReader(\"C:/Users/madsf/Desktop/tweet-editing/tweetsWithTopicAndSentimentMetaFile.txt\"));\r\n        BufferedReader br2 = new BufferedReader(new FileReader(\"C:/Users/madsf/Desktop/tweet-editing/locationid.txt\"));\r\n        BufferedReader br4 = new BufferedReader(new FileReader(\"C:/Users/madsf/Desktop/tweet-editing/locationid.txt\"));\r\n        BufferedReader br3 = new BufferedReader(new FileReader(\"C:/Users/madsf/Desktop/tweet-editing/locationid.txt\"));\r\n\r\n\r\n        String output = \"\";\r\n        try (Scanner sc1 = new Scanner((new File(\"C:/Users/madsf/Desktop/tweet-editing/tweetsWithTopicAndSentimentMetaFile.txt\")));\r\n             Scanner sc2 = new Scanner((new File(\"C:/Users/madsf/Desktop/tweet-editing/locationid.txt\")))) {\r\n            System.out.println(\"write to file\");\r\n            String firstLine = \"\";\r\n            String secondLine = \"\";\r\n            int i = 0;\r\n            while (i < 4935709 ) {\r\n                firstLine = br1.readLine();\r\n                secondLine = br2.readLine();\r\n                if (secondLine ==null){\r\n                    br2 = br4;\r\n                    output = firstLine + \" |\" + secondLine;\r\n                    output += \"\\n\";\r\n\r\n                } else{\r\n                    output = firstLine + \" |\" + secondLine;\r\n                    output += \"\\n\";\r\n                }\r\n               // System.out.println(output);\r\n                pw.write(output);\r\n                i++;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Sql/FileGenerator.java	(revision 1bed461a8493a635bbfd54e13d22442632cac03b)
+++ src/main/java/Sql/FileGenerator.java	(date 1587126371950)
@@ -61,7 +61,6 @@
             }
 
         }
-
     }
 
 }
